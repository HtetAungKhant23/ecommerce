generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id        String  @id @default(uuid())
  name      String  @unique()
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt() @map("updated_at")
  businessUser BusinessUser[]
  customer     Customer[]
  product      Product[]
  attribute    Attribute[]
  category     Category[]

  @@map("business")
}

model BusinessUser {
  id         String   @id @default(uuid())
  businessId String   @map("business_id")
  business   Business @relation(fields: [businessId], references: [id])
  userId     String   @map("user_id")
  user       User     @relation(fields: [id], references: [id])
  code       String   @unique()

  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("business_users")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique()
  password  String
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt() @map("updated_at")
  product      Product[]
  payment      Payment[]
  businessUser BusinessUser[]

  @@map("users")
}

model Customer {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique()
  password   String
  image      String?
  isDeleted  Boolean  @default(false) @map("is_deleted")
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  order           Order[]
  shippingAddress ShippingAddress[]
  payment         Payment[]

  @@map("customers")
}

model Product {
  id         String    @id @default(uuid())
  name       String
  desc       String?
  brand      String
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  businessId String    @map("business_id")
  business   Business  @relation(fields: [businessId], references: [id])
  isDeleted  Boolean   @default(false) @map("is_deleted")

  createdById String @map("created_by_id")
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  orderDetail    OrderDetail[]
  productVarient ProductVarient[]

  @@map("products")
}

model ProductVarient {
  id          String    @id @default(uuid())
  name        String
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id])
  attributeId String    @map("attribute_id")
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  sku         String
  stock       Int       @default(0)
  price       Int
  image       String
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("product_varients")
}

model AttributeName {
  id          String    @id @default(uuid())
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  name        String    @unique()
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("attribute_options")
}

model Attribute {
  id         String   @id @default(uuid())
  name       String   @unique()
  businessId String   @map("business_id")
  business   Business @relation(fields: [businessId], references: [id])
  isDeleted  Boolean  @default(false) @map("is_deleted")

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  attributeName  AttributeName[]
  productVarient ProductVarient[]

  @@map("attributes")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  desc       String?
  businessId String   @map("business_id")
  business   Business @relation(fields: [businessId], references: [id])
  isDeleted  Boolean  @default(false) @map("is_deleted")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  product   Product[]

  @@map("categories")
}

model Discount {
  id          String        @id @default(uuid())
  code        String        @unique()
  desc        String
  amount      Int
  type        DISCOUNT_TYPE
  isAvailable Boolean       @map("is_available")
  isDeleted   Boolean       @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  order     Order[]

  @@map("discounts")
}

model Order {
  id                String           @id @default(uuid())
  orderNo           String           @map("order_no")
  customerId        String           @map("customer_id")
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subTotal          Int              @map("sub_total")
  grandTotal        Int              @map("grand_total")
  discountId        String?          @map("discount_id")
  discount          Discount?        @relation(fields: [discountId], references: [id])
  shippingAddressId String?          @map("shipping_address_id")
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  status            STATUS
  isDeleted         Boolean          @default(false) @map("is_deleted")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")
  orderDetail OrderDetail[]
  payment     Payment[]

  @@map("orders")
}

model OrderDetail {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  price     Int
  quantity  Int
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("order_details")
}

model Payment {
  id          String       @id @default(uuid())
  image       String
  type        PAYMENT_TYPE
  status      STATUS
  orderId     String       @map("order_id")
  order       Order        @relation(fields: [orderId], references: [id])
  customerId  String       @map("customer_id")
  customer    Customer     @relation(fields: [customerId], references: [id])
  confirmById String       @map("confirm_by_id")
  confirmBy   User         @relation(fields: [confirmById], references: [id])
  isDeleted   Boolean      @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("payments")
}

model ShippingAddress {
  id         String    @id @default(uuid())
  phone      String
  address    String
  townShip   String    @map("town_ship")
  city       String
  isDefault  Boolean   @map("is_default")
  customerId String?   @map("customer_id")
  customer   Customer? @relation(fields: [customerId], references: [id])
  isDeleted  Boolean   @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  order     Order[]

  @@map("shipping_address")
}

// ------------ enum --------------

enum DISCOUNT_TYPE {
  PERCENTAGE
  MMK
}

enum PAYMENT_TYPE {
  MOBILEBANKING
  WALLET
}

enum STATUS {
  PENDING
  CONFIRMED
  REJECTED
}
