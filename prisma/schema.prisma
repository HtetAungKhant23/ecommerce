generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique()
  password  String
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  product   Product[]
  payment   Payment[]

  @@map("admins")
}

model EndUser {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique()
  password  String
  image     String?
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  order           Order[]
  shippingAddress ShippingAddress[]
  payment         Payment[]
  CartItem        CartItem[]

  @@map("end_users")
}

model Product {
  id         String    @id @default(uuid())
  name       String
  desc       String?
  brand      String
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  isDeleted  Boolean   @default(false) @map("is_deleted")

  createdById String @map("created_by_id")
  createdBy   Admin  @relation(fields: [createdById], references: [id])

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  productVarient ProductVarient[]

  @@map("products")
}

model ProductVarient {
  id                 String          @id @default(uuid())
  name               String
  productId          String          @map("product_id")
  product            Product         @relation(fields: [productId], references: [id])
  attributeOption1Id String?         @map("attribute_option1_id")
  attribute1         AttributeValue? @relation(name: "option1", fields: [attributeOption1Id], references: [id])
  attributeOption2Id String?         @map("attribute_option2_id")
  attribute2         AttributeValue? @relation(name: "option2", fields: [attributeOption2Id], references: [id])
  attributeOption3Id String?         @map("attribute_option3_id")
  attribute3         AttributeValue? @relation(name: "option3", fields: [attributeOption3Id], references: [id])

  sku             String
  isTrackingStock Boolean @map("is_tracking_stock")
  totalStock      Int     @default(0) @map("total_stock")
  allocatedStock  Int?    @map("allocated_stock")
  price           Int
  image           String
  isDeleted       Boolean @default(false) @map("is_deleted")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")
  orderDetail OrderDetail[]
  cartItem    CartItem[]

  @@map("product_varients")
}

model Attribute {
  id             String           @id @default(uuid())
  name           String
  attributeValue AttributeValue[]

  @@map("attributes")
}

model AttributeValue {
  id              String           @id @default(uuid())
  value           String
  attributeId     String           @map("attribute_id")
  attribute       Attribute        @relation(fields: [attributeId], references: [id])
  productVarient1 ProductVarient[] @relation(name: "option1")
  productVarient2 ProductVarient[] @relation(name: "option2")
  productVarient3 ProductVarient[] @relation(name: "option3")

  @@map("attribute_values")
}

model Category {
  id        String  @id @default(uuid())
  name      String
  desc      String?
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  product   Product[]

  @@map("categories")
}

model Discount {
  id          String        @id @default(uuid())
  code        String        @unique()
  desc        String
  amount      Int
  type        DISCOUNT_TYPE
  isAvailable Boolean       @map("is_available")
  isDeleted   Boolean       @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  order     Order[]

  @@map("discounts")
}

model CartItem {
  id               String         @id @default(uuid())
  productVarientId String         @map("product_varient_id")
  productVarient   ProductVarient @relation(fields: [productVarientId], references: [id])
  quantity         Int
  endUserId        String         @map("end_user_id")
  endUser          EndUser        @relation(fields: [endUserId], references: [id])

  @@map("cart_items")
}

model Order {
  id                String           @id @default(uuid())
  orderNo           String           @map("order_no")
  endUserId         String           @map("end_user_id")
  endUser           EndUser          @relation(fields: [endUserId], references: [id], onDelete: Cascade)
  subTotal          Int              @map("sub_total")
  grandTotal        Int              @map("grand_total")
  discountId        String?          @map("discount_id")
  discount          Discount?        @relation(fields: [discountId], references: [id])
  shippingAddressId String?          @map("shipping_address_id")
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  status            STATUS
  isDeleted         Boolean          @default(false) @map("is_deleted")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")
  orderDetail OrderDetail[]
  payment     Payment[]

  @@map("orders")
}

model OrderDetail {
  id               String         @id @default(uuid())
  orderId          String         @map("order_id")
  order            Order          @relation(fields: [orderId], references: [id])
  productVarientId String         @map("product_varient_id")
  productVarient   ProductVarient @relation(fields: [productVarientId], references: [id])
  price            Int
  quantity         Int
  isDeleted        Boolean        @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("order_details")
}

model Payment {
  id          String       @id @default(uuid())
  image       String
  type        PAYMENT_TYPE
  status      STATUS
  orderId     String       @map("order_id")
  order       Order        @relation(fields: [orderId], references: [id])
  endUserId   String       @map("end_user_id")
  endUser     EndUser      @relation(fields: [endUserId], references: [id])
  confirmById String       @map("confirm_by_id")
  confirmBy   Admin        @relation(fields: [confirmById], references: [id])
  isDeleted   Boolean      @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("payments")
}

model ShippingAddress {
  id        String   @id @default(uuid())
  phone     String
  address   String
  townShip  String   @map("town_ship")
  city      String
  isDefault Boolean  @map("is_default")
  endUserId String?  @map("end_user_id")
  endUser   EndUser? @relation(fields: [endUserId], references: [id])
  isDeleted Boolean  @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  order     Order[]

  @@map("shipping_address")
}

// ------------ enum --------------

enum DISCOUNT_TYPE {
  PERCENTAGE
  MMK
}

enum PAYMENT_TYPE {
  MOBILEBANKING
  WALLET
}

enum STATUS {
  PENDING
  CONFIRMED
  REJECTED
}
